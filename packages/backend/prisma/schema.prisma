generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model no longer has a 'role'
model User {
  id            String        @id @default(cuid())
  stars         Int           @default(100)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  tikTokAccount TikTokAccount?
  campaigns     Campaign[]
  tasks         Task[]
  verificationTickets VerificationTicket[]
}

model TikTokAccount {
  id           String @id
  username     String @map("display_name")
  avatarUrl    String? @map("avatar_url_100")
  accessToken  String @db.Text
  refreshToken String @db.Text
  expiresIn    Int
  scope        String
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique
}

enum CampaignType {
  FOLLOW
  LIKE
}

enum CampaignStatus {
  ACTIVE
  COMPLETE
  PAUSED
}

// Campaign model is now created by a User for themselves
model Campaign {
  id            String         @id @default(cuid())
  type          CampaignType   // The type of campaign (e.g., FOLLOW or LIKE)
  targetUrl     String         // URL of the TikTok profile or video
  thumbnailUrl  String?
  title         String?  
  totalAmount   Int            // How many likes/followers the user wants
  currentAmount Int            @default(0)
  status        CampaignStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())

  // Relation to the user who created it
  user          User           @relation(fields: [userId], references: [id])
  userId        String

  // A campaign has many completed tasks
  tasks         Task[]
  verificationTickets VerificationTicket[] 
}

// Task model remains the same
model Task {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  campaignId  String
  @@unique([userId, campaignId])
}

model VerificationTicket {
  id           String   @id @default(cuid())
  initialCount Int
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  campaign     Campaign @relation(fields: [campaignId], references: [id])
  campaignId   String
}